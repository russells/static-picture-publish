Things to do... -*- mode:outline; fill-column:79 -*-

* Content

** Create XML files.  DONE.

Instead of HTML files.  Need to make sure that the XSLT stuff works as
expected.

I actually create both, by making XML files first, then post-processing them
with xsltproc.  This is necessary because IE6, which otherwise handles XML and
XSL properly, stupidly reads relative locations as relative to the XSL file, so
after that it can't find the CSS file.  WTF?

** Investigate DTDs in xml output.

Find out what web browsers do if an XML file contains a DTD but does not
conform to the DTD.

** Look at CSS.  DONE.

** Work out if we need tables in the output, or if CSS can do it.  DONE.

Thinking mainly about making the thumbnail "cells" all the same size.  This may
need tables to enforce the regular layout.

** Decide whether to keep the HTML output code.  DONE (translate XML to HTML).

Might not be needed if all the targeted clients can use XML.

Konqueror 3.5.1 doesn't translate the XML.

IE6 grabs CSS relative to the location of the XSL file, if both are relative
links.

** Make the index links go to the page near the image.  DONE.

Each "Index" link should be a to href="index.html#a.jpg", so that when we go
back to the index we are near the current image.

(Not sure how this handles image names with strange characters in them.)

** Put the updir link at the bottom of the page as well as the top.  DONE.

This should make it easier to navigate directories.  Perhaps put the
subdirectories table at the bottom too.  Do this only if there are more than a
few images, perhaps 9.

** Allow renaming images and folders.

For example, I have many directories that are named by year and month number:

  2006/
    01/
    02/
    03/

I'd like these names to stay the same in the source directory, but be able to
rename them in the destination:

  2006/
    January/
    February/
    March/

I could put a [folder names] section in the config file:

  [folder names]
  01 = January
  02 = February
  03 = March

So that the destination directories get renamed.

If I do this, what name goes in the [folder order] section: the original name
or the new name?

** Allow rotating images in output.  DONE.

Perhaps a section like this in the config file:

  [Image - a.jpg]
  rotate = 90

Or this:

  [rotate]
  a.jpg = 90

Rotating an image may require copying the original, so the original is in the
same orientation as the web image.  Or perhaps not.  If anyone wants the
original for printing, they can just cope with this.

** Virtual folders.

A shadow directory structure, which points to the real images via the config
files?

** Instructions on pages.  DONE.

Mention that the full image is available by selecting the main image.

** Allow output to be split across web servers.

Mainly, I want the index pages, thumbnails and web-sized pics to be on one
server, and the full-sized pics to be on another.  The main reason for this is
to host the main part of the output on commercial hosting somewhere, and the
big picture archive (which shouldn't be accessed very often) on my home server.
Then I can have the bits that most people will (or should) be looking at most
often hosted with more availability.  It doesn't matter too much if the
full-sized stuff isn't available sometimes.

The easiest way to do this would seem to be to allow specification of a base
URL for the full-sized stuff, give that URL to the XSL, and have it prepended
to the correct links.

** Use .comment/*.xml files.

GNOME (and perhaps others, is this a freedesktop thing?) store picture comments
in a file called .comments/$IMAGENAME.xml, which is gzip or zlib compressed.

** Put thumbnail and image sizes into html.

  <img width=128 height=96 src="a.jpg">

This will require image dimension specs in the XML files, perhaps something
like this:

    <image>
      <name>0,1658,5119258,00</name>
      <ext>.jpg</ext>
      <dimensions width="128" height="96" />
    </image>

We're already opening the images to check their sizes, so there's not much
overhead in recording the sizes.

** Folder images.  Done, not complete.

Allow one image from a folder to be used as the icon for that folder in its
containing folder.  The containing folder will have to ask each sub-folder what
its icon will be.  Default to the first image, like gallery does?

Still need to choose a random image from the dir instead of the first one.


* Code

** Check that we are not publishing into the source directory.  DONE.

This is currently bad, as we would overwrite the source pictures with smaller
copies.  Need some way to check if two paths are equivalent in python.

** Allow publishing into the source directory.

Simply renaming the output images should be enough.  Alternatively, put
thumbnails and web images into a subdirectory of the source directory, but only
if the source and web directories are the same place.

** Ensure that Pictures and PictureDirs are being sorted correctly.  DONE.

Check up on the __eq__() etc methods.

** Create the images from one source.  DONE.

ie Full -> web -> thumbnail, instead of full -> web, full -> thumbnail.

** Use a single list of extensions, compare with folded case.  DONE.

if ext.lower() in options.extensions:
    stuff

** Don't create symlinks to full-sized pics, if specified.

** Delete unused images in webdir.

Unused directories are currently deleted, but not unused images in still-used
directories.

** Add an [include] section.  DONE.

If there is an [include] section, then we'll only include (!) items in that
list.  After this, we should rename [ignore] to [exclude].

** Allow globs in config file.

Instead of having to name every pic in a section:

  [ignore]
  2573-one.jpg
  2574-two.jpg
  2575-three.jpg

allow this:

  [ignore]
  257?-*.jpg

or this:

  [ignore]
  257[3-5]*.jpg

** Allow re-publishing only a part of the source tree.  DONE.

We should be able to have this directory structure:

  a/
  a/b
  a/b/1
  a/c
  a/c/2

and then, if say only the content in a/b changes, we should to run spp over
just that directory and have it still linked into the rest of the output tree.

There are two problems with that:

  In the second run, a/b will appear to the the top level directory, so it will
  not get a link to its parent directory by default.  This is fairly easy to
  fix.

  The second run will have to "know" where the real top level is, so it can
  link to the correct XSL and CSS files.  This can be fairly complicated, as we
  may need to search up and down the filesystem to find out where this spot
  really is.  Or perhaps we could just search up until we find those files.

** Don't copy in CSS and XSL files if they already exist.  DONE.

But add an option to force them to be copied in.  (I didn't do this bit.)

** Use EXIF data.

Date/time in particular.

** Rationalise how the XML and HTML is generated.

It's easy to confuse at the moment, such that it won't generate output files
when it needs to, and re-generates others unnecessarily sometimes.

* Documentation.

** Create the web page for this.  DONE.

** Man page.  DONE.

Done in perl pod.

** Convert man page to docbook.

There are docbook2man etc tools around

** Rearrange the command line options into groups.  DONE.


# arch-tag: d7862aaa-4514-4f8d-b5eb-80826533fee9

