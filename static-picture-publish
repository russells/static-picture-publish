#!/usr/bin/python

from sys import argv, exit, path as syspath, stderr
from os import getcwd, listdir, makedirs, rmdir, stat, unlink
from os.path import abspath, basename, exists as pathexists, isdir, \
     join as pathjoin, split as pathsplit, splitext
from optparse import OptionParser, Option, OptionValueError
from copy import copy
import Image
from errno import ENOENT
#from urllib import quote, quote_plus
from StringIO import StringIO
from string import join as stringjoin
from time import time
from shutil import copyfile


defaultExtensions = '.jpg,.jpeg,.gif,.png,'


class SppOption(Option):
    '''Extend OptionParser to parse image dimension specifications (AxB).'''

    def check_intpair(option, opt, value):
        intstrs = value.split('x')
        try:
            if len(intstrs) == 1:
                i = int(intstrs[0])
                ints = (i,i)
            elif len(intstrs) == 2:
                ints = ( int(intstrs[0]), int(intstrs[1]) )
            else:
                raise OptionValueError(
                    "option %s: Must be an integer or integer pair AxB: %r" % \
                    (opt, value))
        except ValueError,reason:
            raise OptionValueError(
                "option %s: not an integer or integer pair: %s" % (opt, value))
        return ints

    TYPES = Option.TYPES + ("intpair",)
    TYPE_CHECKER = copy(Option.TYPE_CHECKER)
    TYPE_CHECKER["intpair"] = check_intpair


opt = OptionParser(
option_class=SppOption,
version="%prog 0.1",
usage=
'Usage: %prog [options] picdir webdir.\n'
'  Recursively publish pics from picdir into webdir\n'
'\n'
'  Directories and pics from picdir will be mirrored into webdir, as\n'
'  thumbnails and small copies.  Symlinks will be used to point to the\n'
'  originals in picdir.\n'
'\n'
'  %prog can be run multiple times with the same picdir\n'
'  and webdir.  Pre-existing content in picdir that is still current will\n'
'  not have its webdir output regenerated.  Directories and images in picdir\n'
'  that no longer exist will have their equivalents removed from webdir.')

opt.add_option('-c','--copy',
               action='store_true',
               help='Copy originals instead of symlinking')
opt.add_option('--css',
               action='store',
               #metavar="css_file",
               help='CSS file to use in HTML or XML output. (Default inbuilt)')
opt.add_option('-e','--extensions',
               action='store',
               help='Comma-separated list of file extensions to use.  '
               '(Default is "%s").  '
               'If you modify this, be sure to include upper and lower case '
               'versions of the extensions.' % defaultExtensions)
opt.add_option('-g','--regen-markup',
               action='store_true',
               help='Force regeneration of HTML or XML output')
opt.add_option('-H','--html',
               action='store_true',
               help='Output HTML.')
opt.add_option('-n','--no-symlink',
               action='store_true',
               help='Don\'t symlink originals')
opt.add_option('-q','--quiet',
               action='store_true',
               help='Don\'t print any output')
opt.add_option('-r','--regen-all',
               action='store_true',
               help='Force regeneration of all output')
opt.add_option('--row',
               type='int',
               action='store',
               help='Number of images per row in HTML. (Default 3)')
opt.add_option('-s','--image-size',
               type='intpair',
               action='store',
               help='Set maximum dimension for images (Default 800x800 pixels)')
opt.add_option('-t','--title',
               type='string',
               action='store',
               help='Set the HTML title')
opt.add_option('-v','--verbose',
               action='store_true',
               help='Print more information about actions')
opt.add_option('-X','--xml',
               action='store_true',
               help='Create XML files, that will be transformed with XSLT '
               'in the browser, instead of plain HTML.  (Default)')
opt.add_option('--xsl-dir',
               action='store',
               help='XSLT file to use for directory XML output. '
               '(Default inbuilt)')
opt.add_option('--xsl-image',
               action='store',
               help='XSLT file to use for image XML output. '
               '(Default inbuilt)')
opt.add_option('-z','--thumbnail-size',
               type='intpair',
               action='store',
               help='Set maximum dimension for thumbnails '
               '(Default 128x128 pixels)')

def parseOptions():
    global options, picRoot, webRoot, picTree, webTree
    (options, args) = opt.parse_args()
    if len(args) != 2:
        usage()
    if options.extensions:
        options.extensions = options.extensions.split(',')
    else:
        options.extensions = defaultExtensions.split(',')
    if not options.image_size:
        options.image_size = (800,800)
    if not options.thumbnail_size:
        options.thumbnail_size = (128,128)
    if options.thumbnail_size[0] > options.image_size[0] or \
       options.thumbnail_size[1] > options.image_size[1]:
        print >>stderr, "%s: warning: thumbnail (%s) is bigger than image (%s)"\
              % (str(options.thumbnail_size), str(options.image_size))
    if options.xml and options.html:
        print >>stderr, "%s: can't produce both XML and HTML" % argv[0]
        exit(1)
    elif not options.xml and not options.html:
        options.xml = True
    if not options.css:
        options.css = "css/spp.css"
    if options.xml:
        if not options.xsl_dir:
            options.xsl_dir = "xsl/spp-dir.xsl"
        if not options.xsl_image:
            options.xsl_image = "xsl/spp-image.xsl"
    options.messageLevel = 1
    if options.verbose:
        options.messageLevel = 2
    if options.quiet:
        options.messageLevel = 0
    if options.row:
        if options.xml:
            print >>stderr, "%s: cannot set both --row and --xml" % argv[0]
            print >>stderr, "  (Layout is done by XSL for XML output)"
            exit(1)
    else:
        options.row = 3
    picRoot = args[0]
    webRoot = args[1]
    if abspath(picRoot) == abspath(webRoot):
        print >>stderr, "%s: cannot publish into source directory: %s" \
              % (argv[0], abspath(picRoot))
        exit(1)


def usage(errcode=1):
    opt.print_help(stderr)
    exit(errcode)


def message(msg, level=1):
    if level <= options.messageLevel:
        print msg

def verboseMessage(msg):
    message(msg, 2)


entityChars = { '&':"amp", '<':"lt", '>':"gt", '\'':"apos", '"':"quot" }

def entityReplace(s):
    '''Replace the characters "&<>\'" with html entities.'''
    r = StringIO()
    for c in s:
        if c in entityChars:
            r.write("&%s;" % entityChars[c])
        else:
            r.write(c)
    s2 = r.getvalue()
    r.close()
    return s2


class Picture:
    '''Process one pic.'''
    def __init__(self, picName, picDirName, webDirName, dirName):
        self.picName = picName          # file name only
        self.picDirName = picDirName    # path to pic dir
        self.webDirName = webDirName    # path to web dir
        self.dirName = dirName          # path to either dir, relative to root
        self.picPath = pathjoin(picDirName, picName)
        (base, ext) = splitext(self.picName)
        self.imageName = picName
        self.fullImageName = base + "-full" + ext
        self.imagePath = pathjoin(webDirName, self.imageName)
        self.thumbnailName = base + "-thumb" + ext
        self.thumbnailPath = pathjoin(webDirName, self.thumbnailName)
        self.htmlName = base + ".html"
        self.htmlPath = pathjoin(webDirName, self.htmlName)
        self.xmlName = base + ".xml"
        self.xmlPath = pathjoin(webDirName, self.xmlName)
        if options.html:
            self.createMarkup = self.createHTML
        elif options.xml:
            self.createMarkup = self.createXML
            if self.dirName == '':
                self.xslPath = 'spp-image.xsl'
            else:
                self.xslPath = '../spp-image.xsl'
                ht = pathsplit(self.dirName)[0]
                #print "self.dirName == %s" % self.dirName
                while len(ht) != 0 and ht != '/':
                    #print 'ht is %s' % str(ht)
                    self.xslPath = '../' + self.xslPath
                    ht = pathsplit(ht)[0]
        self.picNameBase = base
        self.picNameExt = ext

    def go(self, prevPic, nextPic):
        '''Create the output files (thumbnail, image and html).'''

        if not options.regen_all:
            picStat = stat(self.picPath)

        modified = False
        image = None
        try:
            # Create the web image, if necessary.
            if options.regen_all \
                   or not fileIsNewer(self.imagePath, picStat) \
                   or not self.imageSizeCheck(self.imagePath,
                                              options.image_size):
                #print "Regenerating %s" % self.imagePath
                image = self.generateImage(self.imagePath,
                                           options.image_size, image)
                modified = True
            # Create the thumbnail, if necessary.
            if options.regen_all \
                   or not fileIsNewer(self.thumbnailPath, picStat) \
                   or not self.imageSizeCheck(self.thumbnailPath,
                                              options.thumbnail_size):
                #print "Regenerating %s" % self.thumbnailPath
                image = self.generateImage(self.thumbnailPath,
                                           options.thumbnail_size, image)
                modified = True
                image = None            # gc
        except IOError, reason:
            print >>stderr, "%s: error processing %s: %s" % \
                  (argv[0], self.picPath, str(reason.args))
        self.createMarkup(prevPic, nextPic)
        return modified

    def imageSizeCheck(self, imagePath, requiredSize):
        '''Check to see if the output image is the correct size.

        Return True if the size is correct, false otherwise.'''
        try:
            smallimage = Image.open(imagePath)
            if  smallimage.size[0] > requiredSize[0] or \
                smallimage.size[1] > requiredSize[1] or \
                (smallimage.size[0] < requiredSize[0] and \
                 smallimage.size[1] < requiredSize[1]):
                flag = False
            else:
                flag = True
        except IOError, reason:
            print >>stderr, "%s: error opening %s, it will be regenerated" % \
                  (argv[0], imagePath)
            print >>stderr, "%s" % str(reason.args)
            flag = False
        #print "%s: size:%s required:%s flag:%s" % (imagePath, str(smallimage.size), str(requiredSize), str(flag))
        smallimage = None
        return flag

    def generateImage(self, imagePath, imageSize, image):
        '''Make an output image.'''
        verboseMessage("  %s => %s" % (self.picPath, imagePath))
        starttime = time()
        if image is None:
            image = Image.open(self.picPath)
        image.thumbnail(imageSize, Image.ANTIALIAS)
        image.save(imagePath)
        endtime = time()
        verboseMessage("  generation time %s: %.2f" % \
                       (imagePath, endtime-starttime))
        modified = True
        return image

    def createHTML(self, prevPic, nextPic):
        '''Make the HTML file for one picture.

        This includes links to the previous and next pictures.'''

        verboseMessage("  %s => %s" % (self.picPath, self.htmlPath))
        h = file(self.htmlPath, "w")
        s = StringIO()
        s.write(
            '<!DOCTYPE html ' \
            'PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ' \
            '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n' \
            '<html xmlns="http://www.w3.org/1999/xhtml">\n<head>\n' \
            '<meta http-equiv="Content-type" ' \
            'content="text/html; charset=UTF-8" />\n')
        s.write(
            '<title>%s</title>\n' % self.picName +\
            '</head><body>\n' \
            '<h1 class="picheading">%s</h1>\n' % entityReplace(self.picName) +\
            '<div class="prevnextlinks">\n')
        if prevPic is not None:
            s.write(
                '<a class="prevlink" href="%s">Previous (%s)</a>\n' % \
                (entityReplace(prevPic.htmlName),
                   entityReplace(prevPic.picName)))
        s.write('<a class="indexlink" href=".">Index</a>\n')
        if nextPic is not None:
            s.write(
                '<a class="nextlink" href="%s">Next (%s)</a>\n' % \
                (entityReplace(nextPic.htmlName),
                 entityReplace(nextPic.picName)))
        s.write(
            '</div>\n'
            '<img class="pic" src="%s" alt="%s" />\n' % \
            (entityReplace(self.picName), entityReplace(self.picName)) +\
            '</body></html>\n')
        h.write(s.getvalue())
        s.close()
        h.close()

    def createXML(self, prevPic, nextPic):
        x = file(self.xmlPath, "w")
        s = StringIO()
        s.write(
            '<?xml version="1.0"?>\n'+\
            '<?xml-stylesheet type="text/xsl" href="%s"?>\n' % self.xslPath+\
            '<picinfo>\n'+\
            ' <this>\n'+\
            '  <name>%s</name>\n' % entityReplace(self.picNameBase)+\
            '  <ext>%s</ext>\n' % entityReplace(self.picNameExt)+\
            ' </this>\n')
        if prevPic is not None:
            s.write(
                ' <prev>\n'+\
                '  <name>%s</name>\n' % entityReplace(prevPic.picNameBase)+\
                '  <ext>%s</ext>\n' % entityReplace(prevPic.picNameExt)+\
                ' </prev>\n')
        if nextPic is not None:
            s.write(
                ' <next>\n'+\
                '  <name>%s</name>\n' % entityReplace(nextPic.picNameBase)+\
                '  <ext>%s</ext>\n' % entityReplace(nextPic.picNameExt)+\
                ' </next>\n')
        s.write('</picinfo>\n')
        x.write(s.getvalue())
        s.close()
        x.close()


    def __eq__(self, other): return self.picName == other.picName
    def __ne__(self, other): return self.picName != other.picName
    def __gt__(self, other): return self.picName >  other.picName
    def __lt__(self, other): return self.picName <  other.picName
    def __ge__(self, other): return self.picName >= other.picName
    def __le__(self, other): return self.picName <= other.picName


class PictureDir:
    '''Contains information about a picture directory.'''
    def __init__(self, picRoot, webRoot, dirName='', doUp=False):
        '''Search through the directory, looking for pictures and
        sub-directories.  We do not process anything yet, but wait until we
        know if the subdirs contain anything interesting.'''
        self.picRoot = picRoot
        self.webRoot = webRoot
        self.dirName = dirName          # Relative to picRoot (and webRoot)
        self.dirBasename = basename(dirName)
        self.doUp = doUp                # If true, put "Up" link in html

        if self.dirName=='':
            self.picPath = self.picRoot
            self.webPath = self.webRoot
        else:
            self.picPath = pathjoin(self.picRoot, self.dirName)
            self.webPath = pathjoin(self.webRoot, self.dirName)
        self.htmlPath = pathjoin(self.webPath, "index.html")
        self.xmlPath = pathjoin(self.webPath, "index.xml")
        if self.dirName == '':
            self.xslPath = 'spp-dir.xsl'
            self.cssPath = 'spp.css'
        else:
            self.xslPath = '../spp-dir.xsl'
            self.cssPath = '../spp.css'
            ht = pathsplit(self.dirName)[0]
            while ht != '':
                self.xslPath = '../'+self.xslPath
                self.cssPath = '../'+self.cssPath
                ht = pathsplit(ht)[0]

        self.subdirList = []
        self.picList = []
        # Now create our lists
        lst = listdir(self.picPath)
        for l in lst:
            # If it's a directory, recursively create an instance and process
            # that directory.
            subPath = pathjoin(self.picPath, l)
            if isdir(subPath):
                p = PictureDir(self.picRoot, self.webRoot,
                               pathjoin(self.dirName,l), True)
                if p.hasPics():
                    self.subdirList.append(p)
            elif isPicFile(self.picPath, subPath):
                self.picList.append(Picture(l, self.picPath, self.webPath,
                                            dirName))
        self.picList.sort()
        self.subdirList.sort()
        if options.html:
            self.createMarkup = self.createHTML
        elif options.xml:
            self.createMarkup = self.createXML

    def __str__(self):
        s = '<<PictureDir("%s","%s","%s",%s)' % \
            (self.picRoot, self.webRoot, self.dirName, str(self.doUp))
        s += ':im=[ '
        for p in self.picList:
            s = s + p.picName + ' '
        s = s + ']'
        s = s + ':sd[ '
        for d in self.subdirList:
            s = s + d.dirName+' '
        s = s + ']>>'
        return s


    def hasPics(self):
        return len(self.subdirList) > 0 or len(self.picList) > 0


    def go(self):
        '''Process the pics and sub-directories.'''
        if not self.hasPics():
            message("No pics in %s: doing nothing" % self.picPath)
            return False
        message("%s" % self.picPath)
        if not isdir(self.webPath):
            makedirs(self.webPath)
        modified = False
        for i in range(len(self.picList)):
            pic = self.picList[i]
            if i > 0: prevPic = self.picList[i-1]
            else: prevPic = None
            if i < len(self.picList)-1: nextPic = self.picList[i+1]
            else: nextPic = None
            m = pic.go(prevPic, nextPic)
            if m: modified = True
        for d in self.subdirList:
            m = d.go()
            if m: modified = True
        if options.regen_all or options.regen_markup or modified:
            # Create our directory index
            self.createMarkup()
        return modified

    numberClasses = { 2:'p2', 3:'p3', 4:'p4', 5:'p5' }

    def createHTML(self):
        '''Create the html output for a directory.'''

        verboseMessage("  %s" % self.htmlPath)
        h = file(self.htmlPath, "w")
        s = StringIO()
        s.write(
            '<!DOCTYPE html ' \
            'PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ' \
            '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n' \
            '<html xmlns="http://www.w3.org/1999/xhtml">\n<head>\n' \
            '<meta http-equiv="Content-type" ' \
            'content="text/html; charset=UTF-8" />\n')
        if self.dirName == '': title = "Pics"
        else:                  title = "Pics - %s" % self.dirName
        s.write(
            '<title>%s</title>\n' % title +\
            '<style type="text/css">\n' +\
            inlineCSS +\
            '</style>\n' \
            '</head>\n<body>\n' \
            '<h1 class="maintitle">%s</h1>\n' % title)
        if self.doUp:
            s.write('<a class="uplink" href="..">Up</a><br/>\n')
        for d in self.subdirList:
            s.write(
                '<a class="dirlink" href="%s">%s</a><br/>\n' % \
                (entityReplace(d.dirBasename)+'/',
                 entityReplace(d.dirBasename)))
        for i in range(len(self.picList)):
            p = self.picList[i]
            divClass = ['thumbnaildiv']
            for nth in range(2,6):
                if i%nth==nth-1:
                    divClass.append(self.numberClasses[nth])
            if i%options.row == 0:
                s.write('<div class="thumbnailrow">\n')
            s.write(
                '<div class="%s">' \
                '<a class="piclink" href="%s">' \
                '<img class="piclinkimg" src="%s"' \
                ' alt="%s" />' \
                '<span class="piclinkspan">%s</span></a>' \
                '</div>\n' % \
                (stringjoin(divClass),
                 entityReplace(p.htmlName), entityReplace(p.thumbnailName),
                 entityReplace(p.imageName), entityReplace(p.imageName)))
            if i % options.row == options.row - 1:
                s.write('</div>\n')
        # Ensure the last div is closed.
        if len(self.picList) % options.row != 0:
            s.write('</div>\n')
        s.write('</body></html>\n')
        h.write(s.getvalue())
        s.close()
        h.close()

    def createXML(self):
        verboseMessage("  %s" % self.xmlPath)
        x = file(self.xmlPath, "w")
        s = StringIO()
        if self.dirBasename == '':
            dname = 'Pics'
            dpath = 'Pics'
        else:
            dname = self.dirBasename
            dpath = self.dirName
        s.write(
            '<?xml version="1.0"?>\n' \
            '<?xml-stylesheet type="text/xsl" href="%s"?>\n' % self.xslPath +\
            '<picturedir name="%s" path="%s" css="%s">\n' % (dname, dpath,
                                                             self.cssPath))
        if self.doUp:
            s.write('  <updir/>\n')
        s.write(
            '  <thumbnails>\n'
            '    <x>%s</x>\n    <y>%s</y>\n' % options.thumbnail_size+\
            '  </thumbnails>\n')
        for d in self.subdirList:
            s.write(
                '  <dir>\n' \
                '    <name>%s</name>\n' % d.dirBasename +\
                '    <path>%s</path>\n' % d.dirName +\
                '  </dir>\n')
        for f in self.picList:
            s.write(
                '  <image>\n' \
                '    <name>%s</name>\n' % f.picNameBase +\
                '    <ext>%s</ext>\n' % f.picNameExt +\
                '  </image>\n')
        s.write('</picturedir>\n')
        x.write(s.getvalue())
        s.close()
        x.close()


    # Comparisons assume that all the dirs compared are siblings (ie direct
    # children of one parent directory.)
    def __eq__(self, other): return self.dirBasename == other.dirBasename
    def __ne__(self, other): return self.dirBasename != other.dirBasename
    def __gt__(self, other): return self.dirBasename >  other.dirBasename
    def __lt__(self, other): return self.dirBasename <  other.dirBasename
    def __ge__(self, other): return self.dirBasename >= other.dirBasename
    def __le__(self, other): return self.dirBasename <= other.dirBasename


def dirTree(rootName='.'):
    '''Return a list of directory names starting from a specified root.'''

    def recursiveDirTree(rootName,dirName):
        '''Return a list of directory names.

        The directories are searched for starting from rootName/dirName.  The
        "rootName/" prefix is not included in names in the list.  dirName is
        included in the list.'''
        lst = []
        dirList = listdir(pathjoin(rootName,dirName))
        for d in dirList:
            if isdir(pathjoin(rootName,dirName,d)):
                dName = pathjoin(dirName,d)
                #message("Appending (%s) %s" % (rootName,dName))
                lst.append(dName)
                lst.extend(recursiveDirTree(rootName,dName))
        return lst

    lst = []
    if not isdir(rootName):
        return lst
    #message("Appending (%s) ." % rootName)
    lst.append('.')
    thisDirList = listdir(rootName)
    for subd in thisDirList:
        if isdir(pathjoin(rootName,subd)):
            #message("Appending (%s) %s" % (rootName,subd))
            lst.append(subd)
            lst.extend(recursiveDirTree(rootName,subd))
    return lst


def isPicFile(path, pic):
    '''Determine if a file is a known picture type.

    This currently only looks at the file name (actually the extension).  It
    should also identify the file contents, perhaps using Image methods?'''

    (base, ext) = splitext(pic)
    if ext.lower() in options.extensions:
        return True
    return False


def fileIsNewer(file1, file2):
    '''Return true if first named file is newer than the second.

    file1 and file2 can be names, or the results of calling os.stat().  If
    either file does not exist, we return false.'''
    if isinstance(file1,str):
        try:
            file1stat = stat(file1)
        except OSError,reason:
            if reason.errno == ENOENT: return False
            else: raise
    else:
        file1stat = file1
    if isinstance(file2,str):
        try:
            file2stat = stat(file2)
        except OSError,reason:
            if reason.errno == ENOENT: return False
            else: raise
    else:
        file2stat = file2
    return file1stat.st_mtime > file2stat.st_mtime


def doWebDirs():
    for d in webTree:
        # Handle '.' specially.  This is slightly icky.
        if d == '.':
            webd = webRoot
            picd = picRoot
        else:
            webd = pathjoin(webRoot, d)
            picd = pathjoin(picRoot, d)
        doOneWebDir(webd, picd)


def doOneWebDir(webd, picd):
    # First check that the directory still exists.
    if not isdir(webd):
        return
    if not isdir(picd):
        # There is no corresponding picture directory, so we recursively delete
        # the web output dir.
        deleteDir(webd)


def deleteDir(d):
    '''Recursively delete a whole directory tree.'''
    lst = listdir(d)
    for e in lst:
        p = pathjoin(d,e)
        if isdir(p):
            deleteDir(p)
        else:
            unlink(p)
    message("Removing directory %s" % d)
    rmdir(d)


def searchForFile(path, type, filename):
    '''Look for a file in the python search path, with a couple of optional
    prefixes.'''
    #print >>stderr, "searchfor  (%s, %s)" % (path,filename)
    p = pathjoin(path, filename)
    pe = pathjoin(path, type, filename)
    pme = pathjoin(path, 'makediary', type, filename)
    #print >>stderr, "Looking for %s, cwd is %s" % (p, getcwd())
    if pathexists(pme):
        #print "Found %s" % pme
        return pme
    elif pathexists(pe):
        #print "Found %s" % pe
        return pe
    elif pathexists(p):
        #print "Found %s" % p
        return p
    else:
        return None


def findFile(filename, filetype):
    filepathname = None
    # If we are given a full or relative-to-pwd path to the file, use that.
    if filename.startswith('/') or filename.startswith('./') \
           or filename.startswith('../'):
        filepathname = filename
    else:
        # Otherwise, construct the full path to the file.  If we are running
        # from the development directory, or otherwise not from a full path
        # name, look at relative locations first.
        if argv[0].startswith('.'):
            searchpath = ['.', '..', '../..']
            for p in syspath:
                searchpath.append(p)
        else:
            searchpath = syspath
        #print >>sys.stderr, "searchpath is %s" % str(searchpath)
        for path in searchpath:
            filepathname = searchForFile(path, filetype, filename)
            if filepathname:
                break
    return filepathname


def sppCopyFile(filename, destfilename, filetype):
    f = findFile(filename, "css")
    if f is None:
        print >>stderr, "%s: cannot find %s" % (argv[0], filename)
        return
    copyfile(f, pathjoin(webRoot, destfilename))


if __name__ == '__main__':
    parseOptions()

    pd = PictureDir(picRoot, webRoot)
    pd.go()

    # Copy in the XSL and CSS files.
    sppCopyFile(options.css, "spp.css", "css")
    if options.xml:
        sppCopyFile(options.xsl_dir,   "spp-dir.xsl",   "xsl")
        sppCopyFile(options.xsl_image, "spp-image.xsl", "xsl")

    global webTree
    webTree = dirTree(webRoot)
    doWebDirs()

# arch-tag: dbd38a8f-6259-49ca-a125-6b5cd1f48bdb

